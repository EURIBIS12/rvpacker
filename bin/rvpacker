#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require 'trollop'
require 'rvpacker'

version_string =
%{rvpacker #{Rvpacker::VERSION}
Copyright (c) 2013 Howard Jeng, 2014-2015 Andrew Kesterson, Rachel Wall}

opts = Trollop.options do
  version version_string
  banner <<-EOS
#{version_string}

rvpacker packs and unpacks binary RPG Maker project data to and from YAML so
that it can be version-controlled and collaborated on.

Usage:
        rvpacker {--pack|--unpack} [options]

Options:
EOS

  opt :action, 'Action to perform on the project (pack|unpack)', type: String
  opt :pack, 'Pack YAML into binary RPG Maker data'
  opt :unpack, 'Unpack binary RPG Maker data to YAML'
  opt :project, 'RPG Maker project directory', short: 'd', type: String
  opt :project_type, 'Project type (xp|vx|ace)', short: 't', type: String
  opt :database, 'Only work on the given database', short: 'D', type: String
  opt :force, 'Update target even when source is older than target'
  opt :verbose, 'Print verbose information while processing', short: 'V'
end

opts[:project]      ||= Dir.pwd
opts[:project_type] ||= Rvpacker.project_type_for(opts[:project])

unless Rvpacker.valid_project?(opts[:project])
  Trollop.die("#{opts[:project]} is not a valid RPG Maker project")
end

$VERBOSE = opts[:verbose]

if (opts[:action] && (opts[:pack] || opts[:unpack])) ||
    (opts[:pack] && opts[:unpack])
  Trollop.die('--pack, --unpack, and --action cannot be combined')
end

action = nil

if opts[:action]
  warn 'Warning: --action is deprecated; please use either --pack or --unpack.'
  action = case opts[:action]
  when 'pack'   then :all_text_to_bin
  when 'unpack' then :all_bin_to_text
  else
    Trollop.die("Unknown action: #{opts[:action]}")
  end
else
  action = :all_text_to_bin if opts[:pack]
  action = :all_bin_to_text if opts[:unpack]
end

Trollop.die('No action specified! Please use --pack or --unpack') unless action

extra_opts = {
  database:    opts[:database],
  force:       opts[:force],
  line_width:  -1,
  table_width: -1,
}

RGSS.serialize(opts[:project_type].to_sym, action, opts[:project], extra_opts)
